Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).



public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int closet = 0;
        if(nums == null) return closet;
        Arrays.sort(nums);
        for(int i = 0; i < nums.length && i < 3; i++)
            closet+=nums[i];
        if(nums.length<3)
            return closet;
        
        for(int i=0; i<nums.length-2;i++){
            if(i>0 && nums[i]==nums[i-1])
                continue;
            int j=i+1;
            int k=nums.length-1;
            while(j<k){
                if(j>i+1 && nums[j]==nums[j-1]){
                    j++;
                    continue;
                }
                int sum = nums[i]+nums[j]+nums[k];
                if(Math.abs(target-closet)>Math.abs(target-sum)){
                    closet = sum;
                    if(closet==target)
                        return closet;
                }
                if(sum > target)
                    k--;
                else
                    j++;
            }
               
        }
        return closet;
    }
}
